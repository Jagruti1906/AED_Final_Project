/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI_Medical_Department;

import Login.LoginDirectory;
import Medical_Department.AppointmentDetailsClass;
import Medical_Department.AppointmentDetailsDirectory;
import Medical_Department.DoctorClass;
import Medical_Department.DoctorDirectory;
import UI.Login;
import UI.RegisterDoctor;
import static aed_project.AED_Project.doctor;
import static aed_project.AED_Project.rc;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author jagru
 */
public class DoctorMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form DoctorMainFrame
     */
    public DoctorMainFrame() {
        initComponents();
//        docName.setText(doctor.getName());
    }

    
    public void getDoc(DoctorClass doc) {
        System.out.println(doc.getName());
        docName.setText(doc.getName());
        doctor = doc;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appointmentList = new javax.swing.JButton();
        viewProfile = new javax.swing.JButton();
        addAvailability = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        docName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appListTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        appointmentList.setText("Appointment Lists");
        appointmentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentListActionPerformed(evt);
            }
        });

        viewProfile.setText("View Profile");
        viewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProfileActionPerformed(evt);
            }
        });

        addAvailability.setText("Add Availability");
        addAvailability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAvailabilityActionPerformed(evt);
            }
        });

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        docName.setText("Doctor Name");

        appListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appListTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appListTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(docName, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logout)
                    .addComponent(addAvailability)
                    .addComponent(viewProfile)
                    .addComponent(appointmentList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(docName)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(appointmentList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewProfile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addAvailability)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logout))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void appointmentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentListActionPerformed
        // TODO add your handling code here:
        String[] columnNames = {"Appointment ID","Patient ID","Patient Name","Date Of Encounter", "Purpose","Status"};
        int count= AppointmentDetailsDirectory.getInstance().getCount(doctor.getdoctorId(),"Doctor");
        String[][] rows = new String[count][6];
        int j=0;
        for(int i=0;i<AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().size();i++) {
            if(AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getDoctorID() ==(doctor.getdoctorId())
               && (!AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getStatus().equals("Completed"))) {
                int id = AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getPatientStateID();
                int app_id = AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getId();
                rows[j][0] = Integer.toString(app_id);
                rows[j][1] = Integer.toString(id);
                rows[j][2] = AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getPatientName();
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String s = formatter.format(AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getDate());
                rows[j][3] = s;
                rows[j][4] = AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getDesc();
                rows[j][5] = AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getStatus();
                j++;
            }
        }
        DefaultTableModel model = new DefaultTableModel (rows, columnNames);
        appListTable.setModel(model); 
    }//GEN-LAST:event_appointmentListActionPerformed

    private void addAvailabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAvailabilityActionPerformed
        // TODO add your handling code here:
        this.hide();
        AppointmentSlot as = new AppointmentSlot();
        as.jDateChooser1.getJCalendar().setMinSelectableDate(new Date());
        as.show();
    }//GEN-LAST:event_addAvailabilityActionPerformed

    private void viewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProfileActionPerformed
        // TODO add your handling code here:
        this.hide();
        RegisterDoctor rd = new RegisterDoctor();
        rd.getRole("Doctor");
        DoctorDirectory.getInstance().viewDoctor(doctor, rd);
        rd.show();
    }//GEN-LAST:event_viewProfileActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        this.hide();
        Login log = new Login();
        log.show();
    }//GEN-LAST:event_logoutActionPerformed

    private void appListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appListTableMouseClicked
        // TODO add your handling code here:
        int index = appListTable.getSelectedRow();
        TableModel model = appListTable.getModel();
        String status[] = {"Approved","Completed"};
        JComboBox cb = new JComboBox(status);

        int input;
        input = JOptionPane.showConfirmDialog(this, cb, "Update Status", JOptionPane.DEFAULT_OPTION);
        try{
            String patientName = model.getValueAt(index, 2).toString();
            Date date1=new SimpleDateFormat("yyyy-MM-dd").parse(model.getValueAt(index, 3).toString());  
            String s = model.getValueAt(index, 1).toString();
            int id = Integer.parseInt(s);
            String purpose = model.getValueAt(index, 4).toString();
            String aid = model.getValueAt(index, 0).toString();
            int app_id = Integer.parseInt(aid);
            
            AppointmentDetailsClass appointment = new AppointmentDetailsClass(app_id,date1, patientName, doctor.getName(), id, doctor.getdoctorId(), doctor.getHospitalName(),(String)cb.getSelectedItem(), purpose);
            for(int i=0;i<AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().size();i++) {
                if(AppointmentDetailsDirectory.getInstance().getAppointmentDetailsDir().get(i).getId()== app_id) {
                    AppointmentDetailsDirectory.getInstance().updateAppointment(appointment, i);
                    break;
                }
            }
            model.setValueAt((String)cb.getSelectedItem(), index, 5);
        } catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_appListTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAvailability;
    private javax.swing.JTable appListTable;
    private javax.swing.JButton appointmentList;
    private javax.swing.JLabel docName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JButton viewProfile;
    // End of variables declaration//GEN-END:variables
}
